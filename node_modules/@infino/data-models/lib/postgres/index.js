const path = require( 'path' );
const fs = require( 'fs' );
const Sequelize = require( 'sequelize' );
const config = require( '../config' );

const models = {};
const { database, username, password, ...sequelizeConfig } = config.get( '/postgres' );
if ( sequelizeConfig.logging ) {

    delete sequelizeConfig.logging;

} else {

    sequelizeConfig.logging = false;

}

const sequelize = new Sequelize( database, username, password, {

    dialect: 'postgres',
    define: {
        freezeTableName: true,
    },
    ...sequelizeConfig,

} );

const files = fs.readdirSync( path.join( __dirname, 'definition' ) );

files
    .filter( file => !file.includes( 'index.js' ) )
    .forEach( modelFile => {

        const _model = sequelize.import( path.join( __dirname, 'definition', modelFile ) );
        models[ _model.name ] = _model;

    } );

Object.keys( models ).forEach( model => {

    if ( typeof models[ model ].associate === 'function' ) {

        models[ model ].associate( models );

    }

} );

models.sequelize = sequelize;
models.assertConnection = async function assertConnection() {

    try {

        await sequelize.authenticate();

    } catch ( error ) {

        throw error;

    }

};

module.exports = models;
